Стоян Стефанов - Яваскрипт паттерны Глава 7
1. Шаблоны проектирования Ввод

Шаблоны проектирования предлагают решение наиболее типичных задач,
связанных с архитектурой объектно-ориентированного программного
обеспечения. Они достаточно давно используются на практике и
доказали свою полезность во многих ситуациях. Именно поэтому и вам
будет полезно познакомиться с ними и обсудить их.
Хотя эти шаблоны проектирования могут применяться в любом языке
программирования, тем не менее многие годы они изучаются с
позиций языков со строгим контролем типов и со статическими классами,
таких как C++ и Java.
JavaScript, будучи динамическим нетипизированным языком,
опирающимся на использование прототипов, иногда позволяет удивительно
легко и даже тривиально реализовать некоторые их этих шаблонов.

2. Пример легкости на основе синглтон

Суть шаблона единственного объекта состоит в том, чтобы обеспечить
возможность создать только один экземпляр определенного класса.

var obj = {}; // все что нужно в яваскрипт

function Human() { // с использованием оператора new
    if ('instance' in Human) {
        return Human.instance;
    }

    Human.instance = this;
}

function Human() { // через замыкание
    var instance = this;

    Human = function() {
        return instance;
    }
}

3. Наблюдатель (Observer, Publish/Subscriber)

Шаблон наблюдатель (observer) широко применяется при разработке
клиентских сценариев на JavaScript. Все события, возникающие в
броузерах (mouseover, keypress и другие), являются примерами реализации
этого шаблона. Этот шаблон иногда называют механизмом
собственных событий, то есть событий, которые возбуждаются программно,
в отличие от тех, что возбуждаются броузером. Еще одно название этого
шаблона - подписчик/издатель.

Основная идея шаблона состоит в ослаблении связи между объектами.
Вместо вызова одним объектом метода другого объекта некоторый
объект подписывается на получение извещений об определенных
событиях от другого объекта. Подписчик также называется наблюдателем,
а объект, за которым ведется наблюдение, называется издателем, или
объектом наблюдения. Издатель оповещает (вызывает) всех
подписчиков о наступлении какого-то важного события, и часто сообщение
передается им в форме объекта события.

Основные члены в реализации

subscribers[]; // Массив.
subscribe(event, callback); //Добавляет подписчика в массив.
unsubscribe(event, callback); //Удаляет подписчика из массива.
publish(event); //Просматривает список подписчиков и вызывает методы, указанные при оформлении подписки.

var publisher = {

    subscribers: {
        any: [] // тип события: подписчик
    },

    subscribe: function (fn, type) {
        type = type || 'any';

        if (typeof this.subscribers[type] === "undefined") {
            this.subscribers[type] = [];
        }
        this.subscribers[type].push(fn);
    }.

    unsubscribe: function (fn, type) {
        this.visitSubscribers('unsubscribe', fn, type);
    },

    publish: function (publication, type) {
        this.visitSubscribers('publish', publication, type);
    },

    visitSubscribers: function (action, arg, type) {
        var pubtype = type || 'any',
            subscribers = this.subscribers[pubtype],
            i,
            max = subscribers.length;

        for (i = 0; i < max; i += 1) {
            if (action === 'publish') {
                subscribers[i](arg);
            } else {
                if (subscribers[i] === arg) {
                    subscribers.splice(i, 1);
                }
            }
        }
    }
};

Далее приводится функция, которая принимает объект и превращает
его в объект-издатель, добавляя в него универсальные методы издателя:

function makePublisher(o) {
    var i;

    for (i in publisher) {
        if (publisher.hasOwnProperty(i) && typeof publisher[i] === "function") {
            o[i] = publisher[i];
        }
    }

    о.subscribers = {any: []};
}

// Пример использования

var oleg = {
    name : 'Oleg',
    setName : function(newName) {
        this.name = newName;
        this.publish('name-change', newName);
    }
}

makePulisher(oleg);

oleg.on('name-change', function(newName) {
    // теперь мы знаем что у Олега изменилось имя
    alert(newName);
});

Пример моей реализации - возможность расширять прототип через наследование копированием свойст обьекта
Событийно Ориентированная Коллекция как пример на практике

https://github.com/heavyskyl/VItaJS/blob/master/myapp/public/javascripts/modules/new-event.js
https://github.com/heavyskyl/VItaJS/blob/master/myapp/public/javascripts/modules/data-model-collection.js

ДЗ. Реализовать возможность у Popup виджета из прошлого дз возможность триггерить и подписываться на события

перечень функций -
publish(event) // триггерит евент, при этом вызываются все л для этого евента, елси event === "all" то вызвать все коллбеки
subscribe(event, callback) // возможность подписаться на событие, указав для него коллбек,
unsubscribe(event, callback) // возможность отписаться от события определенный коллбек, если коллбек не передан - то отписать все коллбеки от этого события
once(event, calback) // тоже что и subscribe - но коллбек срабатывает только первый раз

Popup должен триггерить события - 'beforeShow', 'afterShow', 'beforeClose', 'afterClose', 'centered', 'changeData'

Продемонстрировать пример использования и работоспособность новой функциональности





